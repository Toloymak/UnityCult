@page "/"
@using Models.Models
@using Models.Models.Districts
@using Models.Models.Players
@using Models.Models.Technologies
@using Models.Models.Villages
@using Services.Services
@inject GameStateModel GameStateModel;
@inject ITimeService TimeService;
@inject IInfoProvider InfoProvider;
@inject IBuildingService BuildingService;




<MudGrid>
    @foreach (var row in InfoProvider.GetMap(_playerStorageModel).Cells)
    {
        <MudItem Style="width: 120px">
            @foreach (var cell in row)
            {
                <MudButton
                    Variant="Variant.Outlined"
                    Color="Color.Success"
                    @onclick="() => ClickCell(cell)"
                    Class="d-flex align-center mud-width-full py-6"
                    Style="margin: 10px; height: 80px;">
                    @cell.Position <br>
                    @cell.District?.Name
                </MudButton>
            }
        </MudItem>
    }
</MudGrid>

@if (_districtForBuilding != null)
{
    <MudItem Style="max-width: 400px;">
        @foreach (var districtModel in _districtForBuilding)
        {
            <MudButton Variant="Variant.Outlined"
                       FullWidth="true"
                       Style="display: block;"
                       OnClick="() => BuildDistrict(districtModel)">
                @districtModel.Name
            </MudButton>
        }
    </MudItem>
}

@code
{
    private GameStateModel _gameModel;
    private PlayerStorageModel _playerStorageModel;

    private IList<DistrictModel> _districtForBuilding;
    private VillageCellModel _selectedCell;

    [Parameter]
    public double Interval { get; set; } = 1;

    protected override async void OnInitialized()
    {
        _gameModel = GameStateModel;
        _playerStorageModel = _gameModel?.Players[_gameModel.PlayerId];

        StartUpdateUiTask();

        await base.OnInitializedAsync();
    }

    private void StartUpdateUiTask()
    {
        Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(1000);
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private void ClickCell(VillageCellModel cellModel)
    {
        _districtForBuilding = BuildingService.GetAvailableDistricts(_playerStorageModel.VillageMap,
                                                                     new TechnologyModel(),
                                                                     _playerStorageModel.ResourcesStorage,
                                                                     cellModel);
        _selectedCell = cellModel;
    }
    
    private void BuildDistrict(DistrictModel districtModel)
    {
        var result = BuildingService.BuildDistrict(_selectedCell,
                                                   districtModel,
                                                   _playerStorageModel.ResourcesStorage);

        if (result)
        {
            _selectedCell = null;
            _districtForBuilding = null;
        }
        else
        {
            throw new Exception("Oops!");
        }
    }
}